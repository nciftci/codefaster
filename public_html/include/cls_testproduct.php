<?php
/*
CODE GENERATED BY: GRAFXSOFTWARE CODE GENERATOR
http://www.grafxsoftware.com
======================================
CLASS MADE BY: Test Developer
DATE: 2010:05:21
PROJECT: Test Product
PHP: version 5.x.x
======================================
*/

/*

$testproduct=new TestProduct();



$testproduct->getId();




$testproduct->getName();




$testproduct->getDescriptionshort();




$testproduct->getDescription();




$testproduct->getCategoryid();




$testproduct->getIsthisreal();




$testproduct->getTermsagree();




$testproduct->getFileupload();




$testproduct->getActive();








$testproduct->setId();




$testproduct->setName();




$testproduct->setDescriptionshort();




$testproduct->setDescription();




$testproduct->setCategoryid();




$testproduct->setIsthisreal();




$testproduct->setTermsagree();




$testproduct->setFileupload();




$testproduct->setActive();






$testproduct->save();


*/

/**
*
* @author - Test Developer
* @desc -
* @vers - 1.0
*/
class TestProduct
{
protected $where_clause;
protected $enable_undo=false;
protected $id_key='id';
protected $history_table='history';

protected $lang; //do not modify
protected $valid=false;     //do not modify
protected $where_mode=false;//do not modify



protected  $id;




protected  $name_en;




protected  $descriptionshort_en;




protected  $description;




protected  $categoryid;




protected  $isthisreal;




protected  $termsagree;




protected  $fileupload;




protected  $active;






/**
* @author   - Test Developer
* @type     - public
* @desc     - Constructor
* @param    - string $id - the ID
* @return   - mixed rewrite array
* @vers     - 1.0
* @Mod  	-
**/
public function __construct($id = 0,$lang="en")
{

$this->lang=$lang;
if ((is_int($id)&&($id==0))||(is_string($id)&&($id=="0"))) {
$this->valid=true;
$this->where_mode=false;
return;
}

$this->id = $id;

if ((is_string($this->id))&&(stristr($this->id,"where"))) {
$this->where_clause=$this->id;
$this->where_mode=true;
}else {
$this->where_clause=" WHERE `id`='".$this->id."'";
$this->where_mode=false;
}

$SQL = " SELECT `name_$this->lang`,`descriptionshort_$this->lang`,`description`,`categoryid`,`isthisreal`,`termsagree`,`fileupload`,`active` FROM `".DB_PREFIX."product` ".$this->where_clause;
$retid = mysql_query($SQL) or die(mysql_error());

if ($row = mysql_fetch_array($retid))
{
$this->valid=true;



$this->name_en = $row["name_$this->lang"];




$this->descriptionshort_en = $row["descriptionshort_$this->lang"];




$this->description = $row["description"];




$this->categoryid = $row["categoryid"];




$this->isthisreal = $row["isthisreal"];




$this->termsagree = $row["termsagree"];




$this->fileupload = $row["fileupload"];




$this->active = $row["active"];






}
else
{
$this->valid=false;



$this->name_en = "";




$this->descriptionshort_en = "";




$this->description = "";




$this->categoryid = "";




$this->isthisreal = "";




$this->termsagree = "";




$this->fileupload = "";




$this->active = "";





}
}//end constructor TestProduct




/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->id
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getId()
{
return $this->id;

} // end getId()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->name_en
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getName()
{
return $this->name_en;

} // end getName()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->descriptionshort_en
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getDescriptionshort()
{
return $this->descriptionshort_en;

} // end getDescriptionshort()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->description
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getDescription()
{
return $this->description;

} // end getDescription()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->categoryid
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getCategoryid()
{
return $this->categoryid;

} // end getCategoryid()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->isthisreal
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getIsthisreal()
{
return $this->isthisreal;

} // end getIsthisreal()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->termsagree
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getTermsagree()
{
return $this->termsagree;

} // end getTermsagree()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->fileupload
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getFileupload()
{
return $this->fileupload;

} // end getFileupload()





/**
* @author   - Test Developer
* @type     - public
* @desc     - get $this->active
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function getActive()
{
return $this->active;

} // end getActive()









/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->id to $id
* @param    - string $id
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setId($id)
{
$this->id=$id;
} // end setId()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->name_en to $name_en
* @param    - string $name_en
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setName($name_en)
{
$this->name_en=$name_en;
} // end setName()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->descriptionshort_en to $descriptionshort_en
* @param    - string $descriptionshort_en
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setDescriptionshort($descriptionshort_en)
{
$this->descriptionshort_en=$descriptionshort_en;
} // end setDescriptionshort()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->description to $description
* @param    - string $description
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setDescription($description)
{
$this->description=$description;
} // end setDescription()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->categoryid to $categoryid
* @param    - string $categoryid
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setCategoryid($categoryid)
{
$this->categoryid=$categoryid;
} // end setCategoryid()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->isthisreal to $isthisreal
* @param    - string $isthisreal
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setIsthisreal($isthisreal)
{
$this->isthisreal=$isthisreal;
} // end setIsthisreal()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->termsagree to $termsagree
* @param    - string $termsagree
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setTermsagree($termsagree)
{
$this->termsagree=$termsagree;
} // end setTermsagree()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->fileupload to $fileupload
* @param    - string $fileupload
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setFileupload($fileupload)
{
$this->fileupload=$fileupload;
} // end setFileupload()






/**
* @author   - Test Developer
* @type     - public
* @desc     - set $this->active to $active
* @param    - string $active
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function setActive($active)
{
$this->active=$active;
} // end setActive()







/**
* @author   - Test Developer
* @type     - public
* @desc     - check if the data is valid
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/

public function is_valid() {
return $this->valid;
}
/**
* @author   - Test Developer
* @type     - public
* @desc     - saves data into database
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/

public function save() {
if (!$this->valid){
return;
}

if ((($this->id) == 0)&&(!$this->where_mode))
{
$SQL = "INSERT INTO `".DB_PREFIX."product` (`name_$this->lang`,`descriptionshort_$this->lang`,`description`,`categoryid`,`isthisreal`,`termsagree`,`fileupload`,`active`)";
$SQL .= " VALUES('".$this->slashes($this->name_en)."','".$this->slashes($this->descriptionshort_en)."','".$this->slashes($this->description)."','".$this->slashes($this->categoryid)."','".$this->slashes($this->isthisreal)."','".$this->slashes($this->termsagree)."','".$this->slashes($this->fileupload)."','".$this->slashes($this->active)."')";

$retid = mysql_query($SQL);
if (!$retid) {
echo( mysql_error());
}
$this->id = mysql_insert_id();
if ($this->enable_undo) {
$this->write_insert_undo($this->id);
}
}
else
{
if ($this->enable_undo){
$this->write_update_undo();
}
$SQL = "UPDATE `".DB_PREFIX."product` SET `name_$this->lang`='".$this->slashes($this->name_en)."',`descriptionshort_$this->lang`='".$this->slashes($this->descriptionshort_en)."',`description`='".$this->slashes($this->description)."',`categoryid`='".$this->slashes($this->categoryid)."',`isthisreal`='".$this->slashes($this->isthisreal)."',`termsagree`='".$this->slashes($this->termsagree)."',`fileupload`='".$this->slashes($this->fileupload)."',`active`='".$this->slashes($this->active)."'";
$SQL .= $this->where_clause;
$retid = mysql_query($SQL);
if (!$retid) {
echo( mysql_error());
}
}

}//end save()


/**
* @author   - Test Developer
* @type     - public
* @desc     - delete $id from database
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/

public function delete($id)
{
if (empty($id)) return;

if (stristr((string)$id,"where") === FALSE) $where_clause="WHERE `id`='".$id."'";
else $where_clause=$id;
if ($this->enable_undo){
$this->write_delete_undo($where_clause);
};
$SQL = "DELETE FROM `".DB_PREFIX."product` ".$where_clause;
$retid = mysql_query($SQL);
if (!$retid) {
echo( mysql_error());
}
} // end delete()

/**
* @author   - Test Developer
* @type     - public
* @desc     - write undo into history table
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/

public function write_undo($item_id,$sql_text){
if ((!$this->enable_undo)||($sql_text=="")) {
return;
}
$sql_text=base64_encode($sql_text);
$userid=0;
$tablename=DB_PREFIX."product";
$SQL="INSERT INTO `".DB_PREFIX."$this->history_table` (`item_id`,`tablename`,`command`,`date`,`userid`,`valid`)";
$SQL.=" VALUES('".$item_id."','".$tablename."','".$sql_text."',NOW(),'".$userid."','1');";
$retid = mysql_query($SQL);
if (!$retid) { echo( mysql_error()); }

}


/**
* @author   - Test Developer
* @type     - public
* @desc     - write undo for UPDATE
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function write_update_undo(){
$this->make_replace_row_sql($this->where_clause);
}

/**
* @author   - Test Developer
* @type     - public
* @desc     - write INSERT
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function write_insert_undo($id)
{
$this->make_sql_for_insert($id);
}

/**
* @author   - Test Developer
* @type     - public
* @desc     - get SQL query for DELETE
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function write_delete_undo($id_or_where_clause){
$this->make_replace_row_sql($id_or_where_clause);
}


/**
* @author   - Test Developer
* @type     - public
* @desc     - get SQL query for INSERT
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function make_sql_for_insert($id){
$SQL="SELECT * FROM `".DB_PREFIX."product` ".$where_clause;
$result="";
$retid=mysql_query($SQL);
if (!$retid) {
return "";
}
$id_value="";
while ($row = mysql_fetch_assoc($retid)){
$keys="";
$values="";
foreach($row as $key => $value){
if ($key==$this->id_key) {
$id_value=$value;
}
if ($keys!="") {
$keys.=",";
}
$keys.="`".$key."` ";
if ($values!="") {
$values.=",";
}
$values.="'".$value."' ";
}
}
$this->write_undo($id_value, "DELETE FROM `".DB_PREFIX."product` WHERE `id`='".$id."' AND $this->id_key='$id_value';");
}

/**
* @author   - Test Developer
* @type     - public
* @desc     - get the SQL query which make the existing rows
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function make_replace_row_sql($id_or_where_clause){
if (is_int($id_or_where_clause)) {
$where_clause="WHERE `id`='".$id_or_where_clause."'";
}
else {
$where_clause=$id_or_where_clause;
}
$SQL="SELECT * FROM `".DB_PREFIX."product` ".$where_clause;
$result="";
$retid=mysql_query($SQL);
if (!$retid) {
return "";
}
while ($row = mysql_fetch_assoc($retid)){
$keys="";
$values="";
$id_value="";
foreach($row as $key => $value){
if ($key==$this->id_key) {
$id_value=$value;
}
if ($keys!="") {
$keys.=",";
}
$keys.="`".$key."` ";
if ($values!="") {
$values.=",";
}
$values.="'{$value}' ";
}
$this->write_undo($id_value,"REPLACE INTO `" . DB_PREFIX . "product` (".$keys.") VALUES (".$values.");");
};
}

/**
* @author   - Test Developer
* @type     - public
* @desc     - debugging function which shows what's in history table
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function debug_print_history(){
$SQL="SELECT * from `".DB_PREFIX."$this->history_table`;";
$retid=mysql_query($SQL);
if (!$retid) {
return "";
}
while ($row = mysql_fetch_assoc($retid)){
foreach($row as $key => $value){
if ($key=='command') {
$value=base64_decode($value);
}
print("`$key` = '$value'<br>");
}
print("<br />");

}
}

/**
* @author   - Test Developer
* @type     - public
* @desc     - do multiple query, each query is separted by ";;\n"
* @return   - string
* @vers     - 1.0
* @Mod  	-
**/
public function mysql_multiple_query($q) {
$tok = strtok($q, ";;\n");
while ($tok) {
$results=mysql_query("$tok");
$tok = strtok(";;\n");
}
return $results;
}

/**
* @author   - Test Developer
* @type     - public
* @desc     - undo function
* @return   - boolean
* @vers     - 1.0
* @Mod  	-
**/
public function undo($item_id)
{
$SQL="SELECT * from `".DB_PREFIX."$this->history_table` WHERE tablename=`".DB_PREFIX."product` AND valid='1' AND item_id='$item_id'  ORDER BY date DESC LIMIT 1;";
$retid=mysql_query($SQL);
if (!$retid) {
return "";
}
if ($row = mysql_fetch_assoc($retid)){
$command=$row['command'];
if ($command=="") {
return false;
}
$command=base64_decode($command);

$SQL="DELETE from `".DB_PREFIX."$this->history_table` ORDER BY date DESC LIMIT 1;";
if (!mysql_query($SQL)) {
return false;
}
return $this->mysql_multiple_query($command);
}
return false;
}

/**
* @author   - Test Developer
* @type     - public
* @desc     - adding slashes if necesary
* @return   - void
* @vers     - 1.0
* @Mod  	-
**/
public function slashes($str){
if ((get_magic_quotes_gpc()) && (!empty($str))) {
return addslashes($str);
}
else return $str;
}

/**************************************************************/
/*          ADD YOUR CUSTOM FUNCTIONS BELOW                   */
/**************************************************************/


} // end class TestProduct
?>








